** 0
   - `nil` and `t` are special =symbols= that evaluate to themselves.
   - attempt to change their values results in `setting-constant` error.

*** nil

    it has 3 meanings

    - it's a =symbol= with the name 'nil'
      + when used as a variable, 'nil' has the value 'nil'
    - it is the logical /truth/ value *FALSE*
    - it's the list of zero elements =()=
      + '()' and 'nil' are identical

      taken from the manual

      #+BEGIN_SRC elisp
      (cons 'foo ())                ; Emphasize the empty list
      (setq foo-flag nil)           ; Emphasize the truth value FALSE
      #+END_SRC

*** t

    - any non-'nil' value is considered to be true
    - `t` is the preferred way to represent the truth value

** 1

*** form
   - A Lisp expression that can be evaluated is called a "form"
   - an evaluation of a form results in a 'Lisp object'.

     #+BEGIN_SRC elisp
     (car '(1 2))
     ⇒ 1 ; Lisp object
     #+END_SRC

   - a form can be a /macro/ call. 
   - /macro/ forms expands to a new form before returning a List object.

*** variable

    - a `variable` is a name that is bound / set to an /object/.
    - the object is its value.

    - 'user options' are variables which exists so that users can change them
    - 'variables' are described like using a format like functions except there are no arguments
** 2 Lisp Data Types

   - list object is a piece of *data*.
   - there is no "the" type of an object, since an object is a peice of data, it /belongs/ to a data type.

   - primitive types : built into emacs
   - each object belongs to one and only one primitive type.
     + integer
     + float
     + cons
     + symbol
     + string
     + vector
     + hash-table
     + subr
     + and "byte-code function"
     + plus several special types, such as "buffer"
   - Lisp objects are 'self-typing' ie. the primitive type is implicit in the object itself
     + for example if an object primitive type is a vector, nothing can treat it as a number.
   - Type declaration does not exist in Emacs Lisp, like other languages.
     + A Lisp variable can have any type of value, it remembers both the value and the type (implicitly).
     + A small number can only take in a value of certain type

   - The "printed representation" is the output generated by Lisp printer (prin1 function)
   - The "read syntax" is the format accepted by the Lisp reader
     + This is not necessarily unique; many kinds of object have more than one syntax
   - Many cases printer = read syntax
   - however some have no read syntax
     + These objects are printed in "hash notation"

       #+BEGIN_EXAMPLE
       (current-buffer)
          ⇒ #<buffer objects.texi>
       #+END_EXAMPLE
   - In other languages, expression is a text; it has no other form
   - In lisp, an expression is primarily a Lisp object and only secondarily the text (object read syntax)
   - When you evaluate an expression interactively, the Lisp interpreter first reads the textual representation of it, producing a Lisp object, and then evaluates that object
